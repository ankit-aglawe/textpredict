{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#advanced-text-classification-with-transformer-models","title":"Advanced Text Classification with Transformer Models","text":"<p>TextPredict is a powerful Python package designed for various text analysis and prediction tasks using advanced NLP models. It simplifies the process of performing sentiment analysis, emotion detection, zero-shot classification, named entity recognition (NER), and more. Built on top of Hugging Face's Transformers, TextPredict allows seamless integration with pre-trained models or custom models for specific tasks.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Sentiment Analysis: Determine the sentiment of text (positive, negative, neutral).</li> <li>Emotion Detection: Identify emotions such as happiness, sadness, anger, etc.</li> <li>Zero-Shot Classification: Classify text into custom categories without additional training.</li> <li>Named Entity Recognition (NER): Extract entities like names, locations, and organizations from text.</li> <li>Sequence Classification: Fine-tune models for custom classification tasks.</li> <li>Token Classification: Classify tokens within text for tasks like NER.</li> <li>Sequence-to-Sequence (Seq2Seq): Perform tasks like translation and summarization.</li> <li>Model Comparison: Evaluate and compare multiple models on the same dataset.</li> <li>Explainability: Understand model predictions through feature importance analysis.</li> <li>Text Cleaning: Utilize utility functions for preprocessing text data.</li> </ul>"},{"location":"#supported-tasks","title":"Supported Tasks","text":"<ul> <li>Sentiment Analysis</li> <li>Emotion Detection</li> <li>Zero-Shot Classification</li> <li>Named Entity Recognition (NER)</li> <li>Sequence Classification</li> <li>Token Classification</li> <li>Sequence-to-Sequence (Seq2Seq)</li> </ul>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#textpredictinitialize","title":"<code>textpredict.initialize</code>","text":"<p>Initialize the TextPredict model for a specific task.</p>"},{"location":"api_reference/#parameters","title":"Parameters","text":"<ul> <li><code>task</code> (str): The task to perform (e.g., 'sentiment', 'emotion', 'zeroshot', 'ner', 'sequence_classification', 'token_classification', 'seq2seq').</li> <li><code>device</code> (str, optional): The device to run the model on. Defaults to 'cpu'.</li> <li><code>model_name</code> (str, optional): The model name. Defaults to None.</li> <li><code>source</code> (str, optional): The source of the model ('huggingface' or 'local'). Defaults to 'huggingface'.</li> </ul>"},{"location":"api_reference/#returns","title":"Returns","text":"<p>An initialized TextPredict model.</p>"},{"location":"api_reference/#textpredictmodelanalyze","title":"<code>textpredict.model.analyze</code>","text":"<p>Analyze the provided texts using the initialized model.</p>"},{"location":"api_reference/#parameters_1","title":"Parameters","text":"<ul> <li><code>texts</code> (list of str): The texts to analyze.</li> <li><code>return_probs</code> (bool, optional): Whether to return probabilities along with predictions. Defaults to False.</li> </ul>"},{"location":"api_reference/#returns_1","title":"Returns","text":"<p>Analysis results for the provided texts.</p>"},{"location":"api_reference/#textpredictsequenceclassificationtrainer","title":"<code>textpredict.SequenceClassificationTrainer</code>","text":"<p>Trainer class for sequence classification models.</p>"},{"location":"api_reference/#parameters_2","title":"Parameters","text":"<ul> <li><code>model_name</code> (str): The name of the model to use.</li> <li><code>output_dir</code> (str): The directory to save the trained model.</li> <li><code>train_dataset</code> (Dataset): The dataset to use for training.</li> <li><code>val_dataset</code> (Dataset): The dataset to use for validation.</li> </ul>"},{"location":"api_reference/#methods","title":"Methods","text":"<ul> <li><code>train(from_checkpoint=True)</code>: Train the model.</li> <li><code>save()</code>: Save the trained model.</li> <li><code>evaluate(test_dataset)</code>: Evaluate the model on the test dataset.</li> </ul>"},{"location":"api_reference/#textpredictexplainability","title":"<code>textpredict.Explainability</code>","text":"<p>Class for model explainability and feature importance.</p>"},{"location":"api_reference/#parameters_3","title":"Parameters","text":"<ul> <li><code>model_name</code> (str): The name of the model to use.</li> <li><code>task</code> (str): The task to perform.</li> <li><code>device</code> (str, optional): The device to run the model on. Defaults to 'cpu'.</li> </ul>"},{"location":"api_reference/#methods_1","title":"Methods","text":"<ul> <li><code>feature_importance(text)</code>: Get feature importance for the given text.</li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#using-pre-trained-models-from-hugging-face","title":"Using Pre-trained Models from Hugging Face","text":"<pre><code>model = tp.initialize(\n    task=\"sentiment\",\n    device=\"cpu\",\n    model_name=\"AnkitAI/reviews-roberta-base-sentiment-analysis\",\n    source=\"huggingface\",\n)\ntext = \"I love this product!\"\nresult = model.analyze(text, return_probs=True)\nprint(f\"Sentiment Prediction Result: {result}\")\n</code></pre>"},{"location":"examples/#training-a-sequence-classification-model","title":"Training a Sequence Classification Model","text":"<pre><code>import textpredict as tp\nfrom datasets import load_dataset\n\n# Load dataset\ntrain_data = load_dataset(\"imdb\", split=\"train[:10]\")\nval_data = load_dataset(\"imdb\", split=\"test[:10]\")\n\n# Initialize and train the model\ntrainer = tp.SequenceClassificationTrainer(\n    model_name=\"bert-base-uncased\",\n    output_dir=\"./results\",\n    train_dataset=train_data,\n    val_dataset=val_data\n)\ntrainer.train()\n\n# Save the trained model\ntrainer.save()\n\n# Evaluate the model\nmetrics = trainer.evaluate(test_dataset=val_data)\nprint(f\"Evaluation Metrics: {metrics}\")\n</code></pre>"},{"location":"examples/#explainability-and-feature-importance","title":"Explainability and Feature Importance","text":"<pre><code>text = \"I love this product!\"\nexplainer = tp.Explainability(model_name=\"bert-base-uncased\", task=\"sentiment\", device=\"cpu\")\nimportance = explainer.feature_importance(text=text)\nprint(f\"Feature Importance: {importance}\")\n</code></pre>"},{"location":"examples/#benchmarking-a-model","title":"Benchmarking a Model","text":"<pre><code>from datasets import load_dataset\nimport textpredict as tp\n\ndef benchmark_model():\n    benchmarker = tp.Benchmarking(model_name=\"bert-base-uncased\", device=\"cpu\")\n    dataset = load_dataset(\"imdb\", split=\"test[:10]\")\n    dataset = dataset.map(lambda x: benchmarker.tokenizer(x[\"text\"], padding=\"max_length\", truncation=True), batched=True)\n    dataset.set_format(type=\"torch\", columns=[\"input_ids\", \"attention_mask\", \"label\"])\n    performance = benchmarker.benchmark(dataset)\n    print(f\"Benchmarking Performance: {performance}\")\n\nbenchmark_model()\n</code></pre>"},{"location":"examples/#visualizing-metrics","title":"Visualizing Metrics","text":"<pre><code>import textpredict as tp\n\ndef visualize_metrics():\n    metrics = {\"accuracy\": [0.8, 0.85, 0.9], \"loss\": [0.6, 0.4, 0.2]}\n    viz = tp.Visualization()\n    viz.plot_metrics(metrics)\n\nvisualize_metrics()\n</code></pre>"},{"location":"examples/#comparing-models","title":"Comparing Models","text":"<pre><code>from datasets import load_dataset\nimport textpredict as tp\n\ndef compare_models():\n    raw_test_dataset = load_dataset(\"imdb\", split=\"test[:10]\")\n    tokenized_test_dataset = tp.load_data(dataset=raw_test_dataset, splits=[\"test\"])\n    test_dataset = tokenized_test_dataset[\"test\"]\n\n    comparison = tp.ModelComparison(models=[\"bert-base-uncased\", \"roberta-base\"], dataset=test_dataset, task=\"sentiment\")\n    results = comparison.compare()\n    print(f\"Model Comparison Results: {results}\")\n\ncompare_models()\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#installation","title":"Installation","text":"<p>You can install the package via pip:</p> <pre><code>pip install textpredict\n</code></pre>"},{"location":"usage/#quick-start","title":"Quick Start","text":""},{"location":"usage/#initialization-and-simple-prediction","title":"Initialization and Simple Prediction","text":"<pre><code>import textpredict as tp\n\n# Initialize for sentiment analysis\nmodel = tp.initialize(task=\"sentiment\")\ntexts = [\"I love this product!\", \"I hate this product!\"]\nresult = model.analyze(texts, return_probs=False)\nprint(f\"Sentiment Prediction Result: {result}\")\n</code></pre>"},{"location":"usage/#using-pre-trained-models-from-hugging-face","title":"Using Pre-trained Models from Hugging Face","text":"<pre><code>model = tp.initialize(\n    task=\"sentiment\",\n    device=\"cpu\",\n    model_name=\"AnkitAI/reviews-roberta-base-sentiment-analysis\",\n    source=\"huggingface\",\n)\ntext = \"I love this product!\"\nresult = model.analyze(text, return_probs=True)\nprint(f\"Sentiment Prediction Result: {result}\")\n</code></pre>"},{"location":"usage/#using-models-from-local-directory","title":"Using Models from Local Directory","text":"<pre><code>model = tp.initialize(\n    task=\"sentiment\",\n    model_name=\"./results\",\n    source=\"local\",\n)\ntext = \"I love this product!\"\nresult = model.analyze(text, return_probs=True)\nprint(f\"Sentiment Prediction Result: {result}\")\n</code></pre>"},{"location":"usage/#training-a-model","title":"Training a Model","text":"<pre><code>import textpredict as tp\nfrom datasets import load_dataset\n\n# Load dataset\ntrain_data = load_dataset(\"imdb\", split=\"train[:10]\")\nval_data = load_dataset(\"imdb\", split=\"test[:10]\")\n\n# Initialize and train the model\ntrainer = tp.SequenceClassificationTrainer(\n    model_name=\"bert-base-uncased\",\n    output_dir=\"./results\",\n    train_dataset=train_data,\n    val_dataset=val_data\n)\ntrainer.train()\n\n# Save the trained model\ntrainer.save()\n\n# Evaluate the model\nmetrics = trainer.evaluate(test_dataset=val_data)\nprint(f\"Evaluation Metrics: {metrics}\")\n</code></pre>"}]}